"use client";
import {
  __toESM,
  require_react
} from "./chunk-F6QRBXOP.js";

// node_modules/@kombai/react-error-boundary/dist/kombai-react-error-boundary.development.js
var import_react = __toESM(require_react());
var ErrorBoundaryContext = (0, import_react.createContext)(null);
var initialState = {
  didCatch: false,
  error: null
};
var ErrorBoundary = class extends import_react.Component {
  constructor(props) {
    super(props);
    this.resetErrorBoundary = this.resetErrorBoundary.bind(this);
    this.state = initialState;
  }
  static getDerivedStateFromError(error) {
    return {
      didCatch: true,
      error
    };
  }
  resetErrorBoundary() {
    const {
      error
    } = this.state;
    if (error !== null) {
      var _this$props$onReset, _this$props;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {
        args,
        reason: "imperative-api"
      });
      this.setState(initialState);
    }
  }
  componentDidCatch(error, info) {
    var _this$props$onError, _this$props2;
    (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);
  }
  componentDidUpdate(prevProps, prevState) {
    const {
      didCatch
    } = this.state;
    const {
      resetKeys
    } = this.props;
    if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {
      var _this$props$onReset2, _this$props3;
      (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {
        next: resetKeys,
        prev: prevProps.resetKeys,
        reason: "keys"
      });
      this.setState(initialState);
    }
  }
  render() {
    const {
      children,
      fallbackRender,
      FallbackComponent,
      fallback
    } = this.props;
    const {
      didCatch,
      error
    } = this.state;
    let childToRender = children;
    if (didCatch) {
      const props = {
        error,
        resetErrorBoundary: this.resetErrorBoundary
      };
      if (typeof fallbackRender === "function") {
        childToRender = fallbackRender(props);
      } else if (FallbackComponent) {
        childToRender = (0, import_react.createElement)(FallbackComponent, props);
      } else if (fallback !== void 0) {
        childToRender = fallback;
      } else {
        {
          console.error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop");
        }
        throw error;
      }
    }
    return (0, import_react.createElement)(ErrorBoundaryContext.Provider, {
      value: {
        didCatch,
        error,
        resetErrorBoundary: this.resetErrorBoundary
      }
    }, childToRender);
  }
};
function hasArrayChanged() {
  let a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  let b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  return a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]));
}
function ErrorPage(props) {
  return import_react.default.createElement("div", {
    style: {
      minHeight: "100vh",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
      padding: "20px"
    }
  }, import_react.default.createElement("div", {
    style: {
      backgroundColor: "#ffffff",
      borderRadius: "16px",
      boxShadow: "0 20px 50px rgba(0, 0, 0, 0.15)",
      padding: "40px",
      maxWidth: "800px",
      width: "100%",
      maxHeight: "80vh",
      overflow: "auto"
    }
  }, import_react.default.createElement("div", {
    style: {
      textAlign: "center",
      marginBottom: "32px",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      gap: "16px"
    }
  }, import_react.default.createElement("div", {
    style: {
      fontSize: "32px"
    }
  }, "⚠️"), import_react.default.createElement("h1", {
    style: {
      color: "#e53e3e",
      fontSize: "32px",
      fontWeight: "700",
      margin: "0"
    }
  }, "Something went wrong")), import_react.default.createElement("div", {
    style: {
      marginBottom: "24px"
    }
  }, import_react.default.createElement("h2", {
    style: {
      color: "#2d3748",
      fontSize: "18px",
      fontWeight: "600",
      marginBottom: "12px",
      display: "flex",
      alignItems: "center",
      gap: "8px"
    }
  }, import_react.default.createElement("span", null, "🔴"), "Error Message"), import_react.default.createElement("div", {
    style: {
      backgroundColor: "#fed7d7",
      border: "1px solid #feb2b2",
      borderRadius: "8px",
      padding: "16px",
      color: "#742a2a",
      fontSize: "14px",
      fontWeight: "500",
      textAlign: "left",
      overflow: "auto",
      whiteSpace: "pre"
    }
  }, props.error.message || "No error message available")), props.error.stack && import_react.default.createElement("div", null, import_react.default.createElement("h2", {
    style: {
      color: "#2d3748",
      fontSize: "18px",
      fontWeight: "600",
      marginBottom: "12px",
      display: "flex",
      alignItems: "center",
      gap: "8px"
    }
  }, import_react.default.createElement("span", null, "📋"), "Stack Trace"), import_react.default.createElement("div", {
    style: {
      backgroundColor: "#f7fafc",
      border: "1px solid #e2e8f0",
      borderRadius: "8px",
      padding: "16px",
      fontSize: "12px",
      fontFamily: "Monaco, Menlo, 'Ubuntu Mono', monospace",
      color: "#4a5568",
      lineHeight: "1.5",
      overflow: "auto",
      maxHeight: "300px",
      whiteSpace: "pre"
    }
  }, props.error.stack))));
}
function onError(error, info) {
  if (window.sendError) {
    const errorWithComponentStack = error;
    errorWithComponentStack.componentStack = info.componentStack;
    window.sendError(errorWithComponentStack);
  }
}
function ErrorBoundaryReporter(_ref) {
  let {
    children
  } = _ref;
  return import_react.default.createElement(ErrorBoundary, {
    FallbackComponent: (props) => import_react.default.createElement(ErrorPage, {
      error: props.error
    }),
    onError
  }, children);
}
function assertErrorBoundaryContext(value) {
  if (value == null || typeof value.didCatch !== "boolean" || typeof value.resetErrorBoundary !== "function") {
    throw new Error("ErrorBoundaryContext not found");
  }
}
function useErrorBoundary() {
  const context = (0, import_react.useContext)(ErrorBoundaryContext);
  assertErrorBoundaryContext(context);
  const [state, setState] = (0, import_react.useState)({
    error: null,
    hasError: false
  });
  const memoized = (0, import_react.useMemo)(() => ({
    resetBoundary: () => {
      context.resetErrorBoundary();
      setState({
        error: null,
        hasError: false
      });
    },
    showBoundary: (error) => setState({
      error,
      hasError: true
    })
  }), [context.resetErrorBoundary]);
  if (state.hasError) {
    throw state.error;
  }
  return memoized;
}
function withErrorBoundary(component, errorBoundaryProps) {
  const Wrapped = (0, import_react.forwardRef)((props, ref) => (0, import_react.createElement)(ErrorBoundary, errorBoundaryProps, (0, import_react.createElement)(component, {
    ...props,
    ref
  })));
  const name = component.displayName || component.name || "Unknown";
  Wrapped.displayName = "withErrorBoundary(".concat(name, ")");
  return Wrapped;
}
export {
  ErrorBoundaryReporter as ErrorBoundary,
  ErrorBoundaryContext,
  ErrorPage,
  ErrorBoundary as RawErrorBoundary,
  ErrorBoundaryReporter as default,
  useErrorBoundary,
  withErrorBoundary
};
//# sourceMappingURL=@kombai_react-error-boundary.js.map
